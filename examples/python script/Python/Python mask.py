# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Python mask.py
# Created on: 2018-06-15 10:59:27.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Python mask <v_Name__shp> 
# Description: 
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy

# Load required toolboxes
arcpy.ImportToolbox("Model Functions")

# Script arguments
v_Name__shp = arcpy.GetParameterAsText(0)
if v_Name__shp == '#' or not v_Name__shp:
    v_Name__shp = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\mask\\combined\\results\\%Name%.shp" # provide a default value if unspecified

# Local variables:
las = "D:\\PV_Model_Builder\\Arcmap\\model\\las"
Name = "File"
File_LAS = "D:\\PV_Model_Builder\\Arcmap\\model\\las\\File.LAS"
ds__Name__lasd = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\lasd\\ds_%Name%.lasd"
raw__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\raster\\raw\\raw_%Name%"
Buildings__2_ = "D:\\PV_Model_Builder\\Arcmap\\model\\buildings_weekly\\buildings.gdb\\Buildings"
ex__Name_ = "D:\\PV_Model_Builder\\Arcmap\\model\\raster\\ext\\ex_%Name%"
sl__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\slope\\sl_%Name%"
sin__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\slope\\int\\sin_%Name%"
sin__Name___3_ = sin__Name_
slm__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\mask\\slope_mask\\slm_%Name%"
asp__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\aspect\\asp_%Name%"
asi__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\aspect\\int\\asi_%Name%"
asi__Name___3_ = asi__Name_
ai__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\mask\\aspect_mask\\aspect_conditional\\ai_%Name%"
asm__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\mask\\aspect_mask\\aspect_mask\\asm_%Name%"
com__Name_ = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\mask\\combined\\intermediates\\combined_mask\\com_%Name%"
com__Name__shp = "D:\\PV_Model_Builder\\Arcmap\\try2_mb\\mask\\combined\\intermediates\\combined_mask\\com_%Name%.shp"
v_Name__Tbl_dbf = com__Name__shp

# Process: Iterate Files
arcpy.IterateFiles_mb(las, "*", "LAS", "RECURSIVE")

# Process: Create LAS Dataset
arcpy.CreateLasDataset_management("D:\\PV_Model_Builder\\Arcmap\\model\\las\\File.LAS", ds__Name__lasd, "NO_RECURSION", "", "PROJCS['NAD_1983_StatePlane_Alaska_4_FIPS_5004_Feet',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',1640416.666666667],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-150.0],PARAMETER['Scale_Factor',0.9999],PARAMETER['Latitude_Of_Origin',54.0],UNIT['Foot_US',0.3048006096012192]]", "COMPUTE_STATS", "RELATIVE_PATHS", "NO_FILES")

# Process: LAS Dataset to Raster
arcpy.LasDatasetToRaster_conversion(ds__Name__lasd, raw__Name_, "ELEVATION", "BINNING AVERAGE NATURAL_NEIGHBOR", "INT", "CELLSIZE", "1", "1")

# Process: Extract by Mask
arcpy.gp.ExtractByMask_sa(raw__Name_, Buildings__2_, ex__Name_)

# Process: Slope
arcpy.Slope_3d(ex__Name_, sl__Name_, "DEGREE", "1")

# Process: int slope
arcpy.Int_3d(sl__Name_, sin__Name_)

# Process: slope attribute
arcpy.BuildRasterAttributeTable_management(sin__Name_, "Overwrite")

# Process: Set Null
arcpy.gp.SetNull_sa(sin__Name___3_, sin__Name_, slm__Name_, "\"VALUE\">35")

# Process: Aspect
arcpy.Aspect_3d(ex__Name_, asp__Name_)

# Process: int aspect
arcpy.Int_3d(asp__Name_, asi__Name_)

# Process: aspect attribute
arcpy.BuildRasterAttributeTable_management(asi__Name_, "Overwrite")

# Process: Con
arcpy.gp.Con_sa(asi__Name___3_, asi__Name_, ai__Name_, "", " (\"VALUE\">=121.5 AND \"VALUE\" <=247.5) OR \"VALUE\"=-1")

# Process: Set Null (2)
arcpy.gp.SetNull_sa(ai__Name_, ai__Name_, asm__Name_, "\"VALUE\"= 0")

# Process: Extract by Mask (2)
arcpy.gp.ExtractByMask_sa(slm__Name_, asm__Name_, com__Name_)

# Process: Raster to Point
arcpy.RasterToPoint_conversion(com__Name_, com__Name__shp, "VALUE")

# Process: Aggregate Points
arcpy.AggregatePoints_cartography(com__Name__shp, v_Name__shp, "1 Feet")

